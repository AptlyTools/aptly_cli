#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'aptly_cli'

program :version, '0.0.2'
program :description, 'Aptly repository API client'

command :file_list do |c|
  c.syntax  = 'aptly-cli file_list [options]'
  c.summary = 'List all directories that contain uploaded files'
  c.description = 'List all directories'
  c.example 'description', 'aptly-cli file_list'
  c.option '--directory DIRECTORY', String, 'Directory to list packages in'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyFile.new
    if options.directory
      puts aptly_command.file_get(options.directory)
    else
      puts aptly_command.file_dir()
    end
  end
end

command :file_upload do |c|
  c.syntax  = 'aptly-cli file_upload [options]'
  c.summary = 'Parameter --directory is upload directory name. Directory would be created if it doesn’t exist.'
  c.description = 'File upload'
  c.example 'description', 'aptly-cli file_upload --upload /local/copy/of/package.deb --directory /aptlyserver_directory/'
  c.option '--directory DIRECTORY', String, 'Directory to load packages into'
  c.option '--upload UPLOAD', String, 'Package(s) to upload'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyFile.new
    puts aptly_command.file_post(:file_uri => options.directory, :package => options.upload, :local_file => options.upload)
  end
end

command :file_delete do |c|
  c.syntax  = 'aptly-cli file_delete [options]'
  c.summary = 'Deletes all files in upload directory and directory itself. Or delete just a file'
  c.description = 'File delete'
  c.example 'description', 'aptly-cli file_delete --upload /local/copy/of/package.deb --directory /aptlyserver_directory/'
  c.option '--target TARGET', String, 'Path to directory or specific package to delete'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyFile.new
    puts aptly_command.file_delete(options.target)
  end
end

command :repo_create do |c|
  c.syntax = 'aptly-cli repo_create [options]'
  c.summary = 'Create a new repository, requires --name'
  c.description = 'Create a new repository, requires --name'
  c.example 'description', 'aptly-cli repo_create --name="megatronsoftware'
  c.option '--name NAME', String, 'Local repository name, required'
  c.option '--comment COMMENT', String, 'Text describing local repository for the user'
  c.option '--default_distribution DISTRIBUTION', String, 'Default distribution when publishing from this local repo'
  c.option '--default_component COMPONENT', String, 'Default component when publishing from this local repo'
  c.action do |args, options|
    puts options.name
    aptly_command = AptlyCli::AptlyRepo.new
    repo_options = { :name => options.name.to_s, 
                     :comment => options.comment.to_s, 
                     :DefaultDistribution => options.default_distribution.to_s,
                     :DefaultComponent => options.default_component.to_s }
    puts aptly_command.repo_create(repo_options)
  end
end

command :repo_delete do |c|
  c.syntax = 'aptly-cli repo_delete [options]'
  c.summary = 'Delete a local repository, requires --name'
  c.description = 'Delete a local repository, requires --name'
  c.example 'description', 'aptly-cli repo_delete --name megatronsoftware'
  c.option '--name NAME', String, 'Local repository name, required'
  c.option '--force'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyRepo.new
    repo_options = { :name => options.name.to_s, 
                     :force => options.force.to_s }
    puts aptly_command.repo_delete(repo_options)
  end
end

command :repo_edit do |c|
  c.syntax = 'aptly-cli repo_edit [options]'
  c.summary = 'Edit a local repository metadata, requires --name'
  c.description = 'Edit a local repository metadata, requires --name'
  c.example 'description', 'aptly-cli repo_edit --name megatronsoftware --default_distribution trusty'
  c.option '--name NAME', String, 'Local repository name, required'
  c.option '--comment COMMENT', String, 'Edit repository comment'
  c.option '--default_distribution DISTRIBUTION', String, 'Edit DefaultDistribution for repo'
  c.option '--default_component COMPONENT', String, 'Edit DefaultComponent for repo'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyRepo.new
    if options.default_distribution
      repo_options = { :DefaultDistribution => options.default_distribution.to_s }
    end
    if options.default_component
      repo_options = { :DefaultComponent => options.default_component.to_s }
    end
    if options.comment
      repo_options = { :Comment => options.comment.to_s }
    end
    puts aptly_command.repo_edit(options.name.to_s, repo_options)
  end
end

command :repo_list do |c|
  c.syntax = 'aptly-cli repo_list [options]'
  c.summary = 'Show list of currently available local repositories. Each repository is returned as in “show” API'
  c.description = 'Show list of currently available local repositories. Each repository is returned as in “show” API'
  c.example 'description', 'aptly-cli repo_list'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyRepo.new
    puts aptly_command.repo_list()
  end
end

command :repo_package_query do |c|
  c.syntax = 'aptly-cli repo_package_query [options]'
  c.summary = 'List all packages in local repository or perform search on repository contents and return result., requires --name'
  c.description = 'List all packages or search on repo contents, requires --name'
  c.example 'description', 'aptly-cli repo_package_query --name megatronsoftware -query geoipupdate'
  c.option '--name NAME', String, 'Local repository name, required'
  c.option '--query QUERY', String, 'Package to query'
  c.option '--with_deps', 'Return results with dependencies'
  c.option '--format FORMAT', String, 'Format type to return, compact by default. "details" is an option'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyRepo.new
    if options.query
      repo_options = { :name => options.name.to_s, :query => options.query.to_s }
    elsif options.with_deps and options.query.nil?
      repo_options = { :name => options.name.to_s, :with_deps => options.with_deps.to_s }
    elsif options.format and options.query.nil?
      repo_options = { :name => options.name.to_s, :format => options.format.to_s }
    else
      repo_options = { :name => options.name.to_s }
    end
    puts aptly_command.repo_package_query(repo_options)
  end
end

command :snapshot do |c|
  c.syntax = 'aptly-cli snapshot [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aptly-cli::Commands::Snapshot
  end
end

command :repo_show do |c|
  c.syntax = 'aptly-cli repo_show [options]'
  c.summary = 'Returns basic information about local repository'
  c.description = 'Returns basic information about local repository, require --name'
  c.example 'description', 'aptly-cli repo_show --name megatronsoftware'
  c.option '--name NAME', String, 'Local repository name, required'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyRepo.new
    puts aptly_command.repo_show(options.name)
  end
end

command :publish do |c|
  c.syntax = 'aptly-cli publish [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aptly-cli::Commands::Publish
  end
end

command :package do |c|
  c.syntax = 'aptly-cli package [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aptly-cli::Commands::Package
  end
end

command :graph do |c|
  c.syntax = 'aptly-cli graph [options]'
  c.summary = 'Download a graph of repository layout.  Current options are "svg" and "png"'
  c.description = 'Download an svg or png graph of repository layout'
  c.example 'description', 'aptly-cli graph png > ~/repo_graph.png'
  c.option '--type GRAPH_TYPE', String, 'Type of graph to download, present options are png or svg'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyMisc.new
    puts aptly_command.get_graph(options.type)
  end
end

command :version do |c|
  c.syntax = 'aptly-cli version'
  c.description = 'Display aptly server version'
  c.example 'description', 'aptly-cli version'
  c.action do |args, options|
    aptly_command = AptlyCli::AptlyMisc.new
    puts aptly_command.get_version() 
  end
end

